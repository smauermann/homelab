serviceMonitor:
  ## If true, a ServiceMonitor CR is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  enabled: false
  path: /metrics
  #  namespace: monitoring  (defaults to use the namespace this chart is deployed to)
  labels: {}
  interval: 30s
  scheme: http
  tlsConfig: {}
  scrapeTimeout: 30s
  relabelings: []
  metricRelabelings: []
  basicAuth: {}
  targetLabels: []

route:
  main:
    enabled: true
    kind: HTTPRoute
    annotations:
      gethomepage.dev/description: Observability
      gethomepage.dev/enabled: "true"
      gethomepage.dev/group: Monitoring
      gethomepage.dev/icon: grafana.png
      gethomepage.dev/name: Grafana
    hostnames:
      - grafana.costanza.cloud
    parentRefs:
      - group: gateway.networking.k8s.io
        kind: Gateway
        name: private
        namespace: envoy-gateway-system
    matches:
      - path:
          type: PathPrefix
          value: /

ingress:
  enabled: false

resources:
  requests:
    cpu: 32m
    memory: 128Mi
  limits:
    memory: 264Mi

persistence:
  enabled: false

admin:
  existingSecret: grafana-admin
  userKey: username
  passwordKey: password

env: {}

## Pass the plugins you want installed as a list.
plugins:
  - grafana-clock-panel
  - victoriametrics-metrics-datasource
  ## You can also use other plugin download URL, as long as they are valid zip files,
  ## and specify the name of the plugin after the semicolon. Like this:
  # - https://grafana.com/api/plugins/marcusolsson-json-datasource/versions/1.3.2/download;marcusolsson-json-datasource

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
datasources:
  datasources.yaml:
    apiVersion: 1
    deleteDatasources:
      - name: Alertmanager
        orgId: 1
      - name: Loki
        orgId: 1
      - name: Prometheus
        orgId: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://vmsingle-victoria-metrics-stack.monitoring.svc.cluster.local:8429
        isDefault: true
        jsonData:
          timeInterval: "15s"
          queryTimeout: "60s"
          httpMethod: POST
## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
## `path` must be /var/lib/grafana/dashboards/<provider_name>
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: default
        orgId: 1
        folder: ""
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
## dashboards per provider, use provider name as key.
dashboards:
  default:
#    cloudflared:
#      # renovate: depName="Cloudflare Tunnels (cloudflared)"
#      gnetId: 17457
#      revision: 6
#      datasource:
#        - { name: DS_PROMETHEUS, value: Prometheus }
    cert-manager:
      # renovate: depName="Cert-manager-Kubernetes"
      gnetId: 20842
      revision: 3
      datasource: Prometheus
    # the dashboard is also created by the victoria-metrics-stack chart, disable it here for now
    # node-exporter-full:
    #   # renovate: depName="Node Exporter Full"
    #   gnetId: 1860
    #   revision: 41
    #   datasource: Prometheus
    longhorn:
      # renovate: depName="Longhorn"
      gnetId: 16888
      revision: 9
      datasource:
        - name: DS_PROMETHEUS
          value: Prometheus
#    node-feature-discovery:
#      url: https://raw.githubusercontent.com/kubernetes-sigs/node-feature-discovery/master/examples/grafana-dashboard.json
#      datasource: VictoriaMetrics

## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
grafana.ini:
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: false
    check_for_plugin_updates: false
    reporting_enabled: false
  server:
    domain: grafana.costanza.cloud
    root_url: https://grafana.costanza.cloud
  auth.anonymous:
    enabled: false

## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
sidecar:
  dashboards:
    enabled: true
    label: grafana_dashboard
    labelValue: ""
    searchNamespace: ALL
    provider:
      # disableDelete to activate a import-only behaviour
      disableDelete: false
      # allow updating provisioned dashboards from the UI
      allowUiUpdates: false
      # allow Grafana to replicate dashboard structure from filesystem
      foldersFromFilesStructure: false
  datasources:
    enabled: true
    label: grafana_datasource
    labelValue: ""
    searchNamespace: ALL
    initDatasources: true
