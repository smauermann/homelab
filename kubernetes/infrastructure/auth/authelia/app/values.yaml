service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false

pod:
  # Must be Deployment, DaemonSet, or StatefulSet.
  kind: Deployment

  replicas: 1
  revisionHistoryLimit: 3

  strategy:
    type: Recreate

  securityContext:
    container:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false
      capabilities:
        drop: ["ALL"]
    pod:
      fsGroupChangePolicy: OnRootMismatch
      seccompProfile:
        type: RuntimeDefault

  env:
  - name: 'TZ'
    value: 'Europe/Berlin'

  resources:
    limits:
      memory: 125Mi
    requests:
      memory: 25Mi

configMap:
  log:
    ## Level of verbosity for logs: info, debug, trace.
    level: 'info'

  theme: auto

  identity_validation:
    reset_password:
      secret:
        secret_name: encryption-keys

  ## The available providers are: `file`, `ldap`. You must use one and only one of these providers.
  authentication_backend:
    file:
      enabled: true
      path: /secrets/users/users.yaml

  access_control:
    default_policy: one_factor
    rules:
      - domain: '*.costanza.cloud'
        policy: one_factor

  session:
    encryption_key:
      secret_name: encryption-keys

    cookies:
      - subdomain: authelia
        domain: costanza.cloud
        default_redirection_url: https://homepage.costanza.cloud

    redis:
      enabled: true
      host: 'authelia-dragonfly.authelia.svc.cluster.local'
      port: 6379
      password:
        secret_name: dragonfly-secret

  ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
  storage:
    encryption_key:
      secret_name: encryption-keys

    ## This stores the data in a SQLite3 Database.
    ## This is only recommended for lightweight non-stateful installations.
    local:
      enabled: false

    postgres:
      enabled: true
      address: tcp://authelia-postgres-rw.authelia.svc.cluster.local:5432
      database: authelia
      schema: public
      username: authelia
      password:
        secret_name: postgres-user

  notifier:
    filesystem:
      enabled: true
      filename: '/config/notification.txt'

  identity_providers:
    oidc:
      claims_policies:
        default:
          id_token: [ 'groups', 'email', 'email_verified', 'alt_emails', 'preferred_username', 'name' ]
      enabled: true
      hmac_secret:
        secret_name: encryption-keys
      ## The JWK's issuer option configures multiple JSON Web Keys. It's required that at least one of the JWK's
      ## configured has the RS256 algorithm. For RSA keys (RS or PS) the minimum is a 2048 bit key.
      jwks:
        - key_id: 'default'
          algorithm: 'RS256'
          use: 'sig'
          key:
            path: /secrets/rsa-jwk/tls.key
          certificate_chain:
            path: /secrets/rsa-jwk/tls.crt
        - key_id: 'ecdsa256'
          algorithm: 'ES256'
          use: 'sig'
          key:
            path: /secrets/ecdsa-jwk/tls.key
          certificate_chain:
            path: /secrets/ecdsa-jwk/tls.crt

      clients:
        - client_id: argocd
          client_name: ArgoCD
          claims_policy: default
          authorization_policy: 'one_factor'
          client_secret:
            path: '/secrets/argocd-oidc-client-secret/secretHashed'
          public: false
          redirect_uris:
            - https://argocd.costanza.cloud/auth/callback
            - https://argocd.costanza.cloud/applications
          scopes:
            - 'openid'
            - 'groups'
            - 'email'
            - 'profile'
          userinfo_signed_response_alg: 'none'
          id_token_signed_response_alg: 'RS256'
          consent_mode: 'auto'
          pre_configured_consent_duration: '30 days'

secret:
  additionalSecrets:
    users: {}
    dragonfly-secret:
      items:
        - key: password
          path: session.redis.password.txt
    postgres-user:
      items:
        - key: password
          path: storage.postgres.password.txt
    encryption-keys:
      items:
        - key: identity_providers.oidc.hmac.key
          path: identity_providers.oidc.hmac.key
        - key: identity_validation.reset_password.jwt.hmac.key
          path: identity_validation.reset_password.jwt.hmac.key
        - key: session.encryption.key
          path: session.encryption.key
        - key: storage.encryption.key
          path: storage.encryption.key
    rsa-jwk:
      items:
        - key: tls.key
          path: tls.key
        - key: tls.crt
          path: tls.crt
    ecdsa-jwk:
      items:
        - key: tls.key
          path: tls.key
        - key: tls.crt
          path: tls.crt
    argocd-oidc-client-secret:
      items:
        - key: secretHashed
          path: secretHashed
